AWSTemplateFormatVersion: '2010-09-09'

Description: ECS Cluster Fleet

Parameters:
  ClusterName:
    Type: String
    Description: Logical name of the cluster to attach instances to
    ConstraintDescription: Must be DNS friendly
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]+$
  MinSize:
    Description: Minimum number of vCPUs
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 2
  DesiredCapacity:
    Description: Initial number of vCPUs
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 2
  MaxSize:
    Description: Maximum number of vCPUs
    Type: Number
    MinValue: 0
    MaxValue: 200
    Default: 100
  TargetTrackingTargetValue:
    Description: Percentage of reservation that target tracking will try to maintain
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 80
  ScaleOutCooldown:
    Description: Cooldown between scale out events
    Type: Number
    Default: 120
  ScaleInCooldown:
    Description: Cooldown between scale in events
    Type: Number
    Default: 240
  SpotPrice:
    Description: Max Price for Spot instances
    Type: String
    Default: "0.4"
  EBSSize:
    Description: EBS Volume Size for Docker Data Storage
    Type: Number
    MinValue: 22
    MaxValue: 100
    Default: 22
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  InternetSg:
    Type: String
    Description: Client SG to allow traffic to the internet. Optional.
    Default: ''
  MysqlSg:
    Type: String
    Description: Client SG to allow traffic to Mysql. Optional.
    Default: ''
  PostgresSg:
    Type: String
    Description: Client SG to allow traffic to Postgres. Optional.
    Default: ''
  SshSg:
    Type: String
    Description: Server SG to allow inbound SSH traffic. Optional.
    Default: ''
  AMI:
    Description: ECS AMI, https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    Type: AWS::EC2::Image::Id
    Default: ami-0092e55c70015d8c3
  EcsEfs:
    Description: Main EFS ID for the ECS Cluster. Will be mounted at /mnt/efs. Optional.
    Type: String
    Default: ''
  EcsEfsSG:
    Type: String
    Description: EFS Client SG. Optional.
    Default: ''
  VpcId:
    Type: AWS::EC2::VPC::Id

# Validates that whatever subnets you enter in as parameters are in the same VPC as the VPC you choose in the parameters
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Conditions:
  isInternetSgRequired: !Not [!Equals [!Ref InternetSg, ""]]
  isMysqlSgRequired: !Not [!Equals [!Ref MysqlSg, ""]]
  isPostgresSgRequired: !Not [!Equals [!Ref PostgresSg, ""]]
  isSshSgRequired: !Not [!Equals [!Ref SshSg, ""]]
  isEcsEfsSgRequired: !Not [!Equals [!Ref EcsEfsSG, ""]]

Resources:
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData: 
        ImageId: !Ref AMI
        KeyName: !Ref KeyName
        Monitoring:
          Enabled: true
        IamInstanceProfile:
          Arn:
            Fn::ImportValue: !Sub "ecs-${ClusterName}-EC2InstanceProfileArn"
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp2
              VolumeSize: 8
          - DeviceName: /dev/xvdcz
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp2
              VolumeSize: !Ref EBSSize
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "ecs-${ClusterName}-NodesSG"
          - !If [isInternetSgRequired, !Ref InternetSg, !Ref "AWS::NoValue"]
          - !If [isMysqlSgRequired, !Ref MysqlSg, !Ref "AWS::NoValue"]
          - !If [isPostgresSgRequired, !Ref PostgresSg, !Ref "AWS::NoValue"]
          - !If [isSshSgRequired, !Ref SshSg, !Ref "AWS::NoValue"]
          - !If [isEcsEfsSgRequired, !Ref EcsEfsSG, !Ref "AWS::NoValue"]
        UserData: !Base64
          "Fn::Sub":
            - |
              #!/bin/bash -xe

              echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

              export EC2_INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
              aws ec2 create-tags --resources $EC2_INSTANCE_ID --tags Key=Name,Value=ecs-cluster-${ClusterName} --region=${AWS::Region}

              if [[ -n "${EcsEfs}" ]]; then
                  echo "${EcsEfs}:/ /mnt/efs    efs   _netdev,noresvport  0   0" >> /etc/fstab
                  mount /mnt/efs
              fi
            - ECSCluster:
                Fn::ImportValue: !Sub "ecs-${ClusterName}-ECSCluster"

  ECSSpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        ExcessCapacityTerminationPolicy: default
        IamFleetRole:
          Fn::ImportValue: !Sub "ecs-${ClusterName}-IAMRoleSpotFleetArn"
        SpotPrice: !Ref SpotPrice
        TargetCapacity: !Ref DesiredCapacity
        TerminateInstancesWithExpiration: true
        ReplaceUnhealthyInstances: true
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - InstanceType: c5.4xlarge
                WeightedCapacity: 16  # number of vCPUs
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c5.2xlarge
                WeightedCapacity: 8
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c5.xlarge
                WeightedCapacity: 4 
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c5.large
                WeightedCapacity: 2
                SubnetId: !Join [",", !Ref Subnets]

              - InstanceType: c4.4xlarge
                WeightedCapacity: 14
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c4.2xlarge
                WeightedCapacity: 6  # slightly less than vCPU count due to older generation hardware
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c4.xlarge
                WeightedCapacity: 3
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: c4.large
                WeightedCapacity: 1.5
                SubnetId: !Join [",", !Ref Subnets]

              - InstanceType: m5.4xlarge
                WeightedCapacity: 16
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m5.2xlarge
                WeightedCapacity: 8
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m5.xlarge
                WeightedCapacity: 4
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m5.large
                WeightedCapacity: 2
                SubnetId: !Join [",", !Ref Subnets]

              - InstanceType: m4.4xlarge
                WeightedCapacity: 14
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m4.2xlarge
                WeightedCapacity: 6
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m4.xlarge
                WeightedCapacity: 3
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: m4.large
                WeightedCapacity: 1.5
                SubnetId: !Join [",", !Ref Subnets]

              - InstanceType: r4.4xlarge
                WeightedCapacity: 14
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: r4.2xlarge
                WeightedCapacity: 6
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: r4.xlarge
                WeightedCapacity: 3
                SubnetId: !Join [",", !Ref Subnets]
              - InstanceType: r4.large
                WeightedCapacity: 1.5
                SubnetId: !Join [",", !Ref Subnets]

  SpotFleetScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxSize
      MinCapacity: !Ref MinSize
      ResourceId: !Join
        - /
        - - spot-fleet-request
          - !Ref ECSSpotFleet
      RoleARN:
        Fn::ImportValue: !Sub "ecs-${ClusterName}-IAMRoleSpotFleetScalingArn"
      ScalableDimension: 'ec2:spot-fleet-request:TargetCapacity'
      ServiceNamespace: ec2

  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-cpu'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SpotFleetScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetTrackingTargetValue
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        CustomizedMetricSpecification:
          MetricName: CPUReservation
          Namespace: AWS/ECS
          Statistic: Average
          Dimensions:
            - Name: ClusterName
              Value:
                Fn::ImportValue: !Sub "ecs-${ClusterName}-ECSCluster"

  ServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ServiceScalingPolicyCPU  # multiple scaling policies must be created sequentially
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-memory'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SpotFleetScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetTrackingTargetValue
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        CustomizedMetricSpecification:
          MetricName: MemoryReservation
          Namespace: AWS/ECS
          Statistic: Average
          Dimensions:
            - Name: ClusterName
              Value:
                Fn::ImportValue: !Sub "ecs-${ClusterName}-ECSCluster"
